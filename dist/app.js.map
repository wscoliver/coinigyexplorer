{"version":3,"sources":["../src/app.js"],"names":["promisifyAll","prototype","rargs","process","argv","slice","configPath","config","path","penv","env","apiCredentials","opts","hostname","port","secure","SCsocket","connect","on","status","console","log","emit","err","token","bitfinexOrder","gdaxOrder","bitfinexOrderChan","subscribe","gdaxOrderChan","watch","bitfinexData","length","gdaxData"],"mappings":";;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;AAVA;;;;AAWA,mBAASA,YAAT,CAAsB,eAAUC,SAAhC;AACA;AACA,IAAMC,QAAQC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAd;AACA,IAAMD,OAAO,wBAASF,KAAT,CAAb;AACA,IAAMI,aAAaF,KAAK,QAAL,CAAnB;AACA,iBAAOG,MAAP,CAAc,EAAEC,MAAMF,UAAR,EAAd;AACA,IAAMG,OAAON,QAAQO,GAArB;;AAEA,IAAMC,iBAAiB;AACrB,YAAUF,KAAK,WAAL,CADW;AAErB,eAAaA,KAAK,cAAL;AAFQ,CAAvB;;AAKA,IAAMG,OAAO;AACXC,YAAU,mBADC;AAEXC,QAAM,KAFK;AAGXC,UAAQ;AAHG,CAAb;AAKA,IAAMC,WAAW,8BAAcC,OAAd,CAAsBL,IAAtB,CAAjB;;AAEAI,SAASE,EAAT,CAAY,SAAZ,EAAuB,UAACC,MAAD,EAAY;AACjCC,UAAQC,GAAR;AACAD,UAAQC,GAAR,CAAYF,MAAZ;AACAH,WAASM,IAAT,CAAc,MAAd,EAAsBX,cAAtB,EAAsC,UAACY,GAAD,EAAMC,KAAN,EAAgB;AACpD,QAAG,CAACD,GAAD,IAAQC,KAAX,EAAkB;AAChBJ,cAAQC,GAAR;AACAD,cAAQC,GAAR,CAAYG,KAAZ;AACD;AACD;AACA;AACA,QAAMC,gBAAgB,sBAAtB;AACA,QAAMC,YAAY,sBAAlB;;AAEA,QAAMC,oBAAoBX,SAASY,SAAT,CAAmBH,aAAnB,CAA1B;AACA,QAAMI,gBAAgBb,SAASY,SAAT,CAAmBF,SAAnB,CAAtB;;AAEAC,sBAAkBG,KAAlB,CAAwB,UAACC,YAAD,EAAkB;AACxCX,cAAQC,GAAR,CAAY,gBAAZ;AACAD,cAAQC,GAAR,CAAYU,aAAaC,MAAzB;AACAZ,cAAQC,GAAR,CAAYU,YAAZ;AACD,KAJD;AAKAF,kBAAcC,KAAd,CAAoB,UAACG,QAAD,EAAc;AAChCb,cAAQC,GAAR,CAAY,YAAZ;AACAD,cAAQC,GAAR,CAAYY,SAASD,MAArB;AACAZ,cAAQC,GAAR,CAAYY,QAAZ;AACD,KAJD;AAKA;AACD,GAxBD;AAyBD,CA5BD","file":"app.js","sourcesContent":["/*\n  Main App\n*/\n\nimport minimist from 'minimist'\nimport dotenv from 'dotenv'\nimport Datastore from 'nedb'\nimport Bluebird from 'bluebird'\nimport co from 'co'\nimport socketCluster from 'socketcluster-client'\n// bluebird\nBluebird.promisifyAll(Datastore.prototype)\n// Process Arguments\nconst rargs = process.argv.slice(2)\nconst argv = minimist(rargs)\nconst configPath = argv['config']\ndotenv.config({ path: configPath })\nconst penv = process.env\n\nconst apiCredentials = {\n  'apiKey': penv['X_API_KEY'],\n  'apiSecret': penv['X_API_SECRET']\n}\n\nconst opts = {\n  hostname: 'sc-02.coinigy.com',\n  port: '443',\n  secure: 'true'\n}\nconst SCsocket = socketCluster.connect(opts)\n\nSCsocket.on('connect', (status) => {\n  console.log(`SCsocket status:`)\n  console.log(status)\n  SCsocket.emit('auth', apiCredentials, (err, token) => {\n    if(!err && token) {\n      console.log(`Auth successful with token`)\n      console.log(token)\n    }\n    // Subscribe\n    //const bitfinexTrade = 'TRADE-BITS--USD--BTC'\n    const bitfinexOrder = 'TRADE-BITS--USD--BTC'\n    const gdaxOrder = 'TRADE-GDAX--BTC--USD'\n\n    const bitfinexOrderChan = SCsocket.subscribe(bitfinexOrder)\n    const gdaxOrderChan = SCsocket.subscribe(gdaxOrder)\n\n    bitfinexOrderChan.watch((bitfinexData) => {\n      console.log('Bitfinex Order')\n      console.log(bitfinexData.length)\n      console.log(bitfinexData)\n    })\n    gdaxOrderChan.watch((gdaxData) => {\n      console.log('Gdax Order')\n      console.log(gdaxData.length)\n      console.log(gdaxData)\n    })\n    //\n  })\n})\n"]}