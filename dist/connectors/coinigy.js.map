{"version":3,"sources":["../../src/connectors/coinigy.js"],"names":["promisifyAll","prototype","opts","hostname","port","secure","dataConnect","apiCredentials","socketPipe","SCsocket","connect","on","status","emit","err","token","forEach","topic","chan","subscribe","watch","mesg","payload","onNext","run","dataPipe","Subject","incoming"],"mappings":";;;;;;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AACA;AAXA;;;;AAYA,mBAASA,YAAT,CAAsB,eAAUC,SAAhC;;AAEA,IAAMC,OAAO;AACXC,YAAU,mBADC;AAEXC,QAAM,KAFK;AAGXC,UAAQ;AAHG,CAAb;;AAMA,IAAMC,cAAc,SAAdA,WAAc,CAASC,cAAT,EAAyBC,UAAzB,EAAqC;AACvD,MAAMC,WAAW,8BAAcC,OAAd,CAAsBR,IAAtB,CAAjB;;AAEAO,WAASE,EAAT,CAAY,SAAZ,EAAuB,UAACC,MAAD,EAAY;AACjCH,aAASI,IAAT,CAAc,MAAd,EAAsBN,cAAtB,EAAsC,UAACO,GAAD,EAAMC,KAAN,EAAgB;AACpD,UAAG,CAACD,GAAD,IAAQC,KAAX,EAAkB,CAEjB;AACD,uBAAOC,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,YAAMC,OAAOT,SAASU,SAAT,CAAmBF,KAAnB,CAAb;AACAC,aAAKE,KAAL,CAAW,UAACC,IAAD,EAAU;AACnB,cAAMC,UAAU;AACdL,wBADc;AAEdI;AAFc,WAAhB;AAIAb,qBAAWe,MAAX,CAAkBD,OAAlB;AACD,SAND;AAOD,OATD;AAUD,KAdD;AAeD,GAhBD;AAiBD,CApBD;AAqBA,IAAME,MAAM,SAANA,GAAM,CAASjB,cAAT,EAAyBkB,QAAzB,EAAmC;AAC7C,MAAMjB,aAAa,IAAI,aAAGkB,OAAP,EAAnB;AACApB,cAAYC,cAAZ,EAA4BC,UAA5B;AACAA,aAAWW,SAAX,CAAqB,UAACQ,QAAD,EAAc;AACjCF,aAASF,MAAT,CAAgBI,QAAhB;AACD,GAFD;AAGD,CAND;kBAOe;AACbrB,0BADa;AAEbkB;AAFa,C","file":"coinigy.js","sourcesContent":["/*\n  Main App\n*/\n\n\nimport Datastore from 'nedb'\nimport Bluebird from 'bluebird'\nimport co from 'co'\nimport socketCluster from 'socketcluster-client'\nimport { topics } from '../products'\nimport Rx from 'rx'\n// bluebird\nBluebird.promisifyAll(Datastore.prototype)\n\nconst opts = {\n  hostname: 'sc-02.coinigy.com',\n  port: '443',\n  secure: 'true'\n}\n\nconst dataConnect = function(apiCredentials, socketPipe) {\n  const SCsocket = socketCluster.connect(opts)\n\n  SCsocket.on('connect', (status) => {\n    SCsocket.emit('auth', apiCredentials, (err, token) => {\n      if(!err && token) {\n\n      }\n      topics.forEach((topic) => {\n        const chan = SCsocket.subscribe(topic)\n        chan.watch((mesg) => {\n          const payload = {\n            topic,\n            mesg\n          }\n          socketPipe.onNext(payload)\n        })\n      })\n    })\n  })\n}\nconst run = function(apiCredentials, dataPipe) {\n  const socketPipe = new Rx.Subject()\n  dataConnect(apiCredentials, socketPipe)\n  socketPipe.subscribe((incoming) => {\n    dataPipe.onNext(incoming)\n  })\n}\nexport default {\n  dataConnect,\n  run\n}\n"]}